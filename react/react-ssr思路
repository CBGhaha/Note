1：服务端和客户端各自有自己的store history
2: 服务端和客户端入口都有一个公共的函数文件 createApp 它接受可变的store(redux初始化state),history 返回完整的react实例
   *可变的store取决于初始化的state所以可以有一个createStore函数
3：客户端入口文件传递初始化的store和BrowserHistory模式history给createApp 得到react实例渲染客户端
4：服务端传递保存了页面初始化数据（）的store 和根据请求路径的createMemoryHistory({initialEntries:[...根据node req的url]}) 给createApp得到react实例 并插入html模板返回给浏览器
   *为了适应服务端的需求根据req路径匹配到route里的数据预加载（好奇在vue里可匹配到单个vue文件实例里的属性执行数据预加载请求）react-router采用静态数据 即将router的配置放在一个js文件里集中管理  用react-router-config匹配所有route promise.all等待所有异步数据得到

   *
api:
import {renderToString} from 'react-dom/server' : 将react实例转换为string插入html模板
import createHistory from 'history/createMemoryHistory' :创建服务端路由模式
import {matchPath} from 'react-router-dom'; :用于查看req url和静态路由是否有匹配关系（命中路由）如果有返回html
import { matchRoutes } from 'react-router-config' 用于查看req url匹配中的route 返回匹配中的数组 供下一步获取预加载数据
